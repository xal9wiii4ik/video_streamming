# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: create .env file
        run: |
          touch .env
          echo SECRET_KEY='146EtHWvxaInR3YB3d2Cdtn4emQcUBWw' >> .env
          echo FLASK_APP='main' >> .env
          echo FLASK_ENV='development' >> .env
          echo DATABASE='postgresql' >> .env
          echo SQL_HOST='db' >> .env
          echo SQL_USER='flask_user' >> .env
          echo SQL_PASSWORD='1234567816' >> .env
          echo SQL_DB_NAME='video_streaming' >> .env
          echo SQL_PORT='5432' >> .env
          cat .env

      - name: create .env.db file
        run: |
          touch .env.db
          echo POSTGRES_DB=video_streaming >> .env
          echo POSTGRES_USER=flask_user >> .env
          echo POSTGRES_PASSWORD=1234567816 >> .env
          cat .env.db
      # Runs a single command using the runners shell
      - name: run docker
        run: "docker-compose up -d --build"

      # Runs a set of commands using the runners shell
      - name: run tests
        run: pytest app/tests
